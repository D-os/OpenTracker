# BuildSettings
#
# Setup global variables.

# C and C++ flags
if $(OSPLAT) = PPC {
	# filter out -nosyspath
	CFLAGS = [ FFilter $(CFLAGS) : -nosyspath ] ;
	C++FLAGS = [ FFilter $(C++FLAGS) : -nosyspath ] ;
}

# Use copyattr for copying.
CP = copyattr --data ;

# mkdir shall not fail, if the directory already exists.
MKDIR = mkdir -p ;

# Specify how to get beres.
{
	local archive = tools.tgz ;
	MakeLocate $(archive) : $(LOCALE_DOWNLOADS_DIR) ;
	local url ;
	local pathPrefix ;
	if $(OSPLAT) = X86 {
		url = http://opentracker.sourceforge.net/downloads/x86/tools-x86.tgz ;
		pathPrefix = bin/x86 ;
	} else {
		url = http://opentracker.sourceforge.net/downloads/ppc/tools-ppc.tgz ;
		pathPrefix = bin/ppc ;
	}
	Download $(archive) : $(url) ;
	local targetDir = [ FDirName $(LOCALE_DOWNLOADS_DIR) tools ] ;
	local files = beres lib/libreseditor.so lib/libresparser.so ;
	UnarchiveFiles $(archive) : $(pathPrefix)/$(files) : $(targetDir) : beres
		: 3 : beres ;
	MakeLocate beres : [ FDirName $(targetDir) ] ;
	MODE on beres = $(EXEMODE) ;
	Chmod beres ;
	RESCOMP = beres ;
}

# Specify how to get the unit test stuff.
# TODO: Currently only an x86 archive is available.
if $(OSPLAT) = X86 {
	local archive = unittests.zip ;
	MakeLocate $(archive) : $(LOCALE_DOWNLOADS_DIR) ;
	local url ;
	if $(OSPLAT) = X86 {
		url = http://tfs.cs.tu-berlin.de/~bonefish/private/unittests-x86.zip ;
	} else {
	}
	Download $(archive) : $(url) ;
	local targetDir = $(LOCALE_GENERATED_DIR) ;
	LOCATE on UnitTester = $(LOCALE_UNITTESTS_DIR) ;
	LOCATE on libcppunit.so = [ FDirName $(LOCALE_UNITTESTS_DIR) lib ] ;
	Unarchive UnitTester libcppunit.so : $(archive) : $(targetDir) ;
}

# Add the locale includes to the system include dirs.
SYSHDRS += $(LOCALE_INCLUDE_DIR) $(LOCALE_POSIX_INCLUDE_DIR) ;

# Modify the main target dirs for catalogs and tools.
SetConfigVar LOCATE_MAIN_TARGET : LOCALE_TOP add-ons catalogs
	: [ FDirName $(LOCALE_DISTRO_DIR) add-ons catalogs ] ;
SetConfigVar LOCATE_MAIN_TARGET : LOCALE_TOP tools
	: [ FDirName $(LOCALE_DISTRO_DIR) tools ] ;

rule SetUpSubDirBuildSettings {
	# SetUpSubDirBuildSettings <dir> ;
	#
	# Sets up the compiler flags and defines based on the WARNINGS, DEBUG, and
	# OPTIMIZE variables. Also sets the locations for the targets (objects,
	# libraries and executables).
	#
	# <dir>: Parameters as passed to the SubDir rule, i.e. the name of the
	#        TOP variable and the subdir tokens.
	#
	local dir = $(1) ;

	# warnings settings
	if $(WARNINGS) != 0 {
		if $(OSPLAT) = X86 {
			CCFLAGS += -Wall -Wno-multichar -Wmissing-prototypes ;
			CCFLAGS += -Wpointer-arith -Wcast-align -Wsign-compare ;
			C++FLAGS += -Wall -Wno-multichar -Wmissing-prototypes ;
			C++FLAGS += -Wno-ctor-dtor-privacy -Woverloaded-virtual ;
			C++FLAGS += -Wpointer-arith -Wcast-align -Wsign-compare ;
		} else {
			CCFLAGS += -w on -requireprotos ;
		}
	}

	# debugging settings
	if $(DEBUG) {
		OPTIMIZE = 0 ;
		DEFINES += DEBUG=$(DEBUG) ;
		CCFLAGS += -g ;
		C++FLAGS += -g ;
		LINKFLAGS += -g ;
	}

	# optimization settings
	if $(OPTIMIZE) = 0 {
		if $(OSPLAT) = X86 {
			OPTIM = -O0 ;
		} else {
			OPTIM = -O0 ;
		}
	} else {
		if $(OSPLAT) = X86 {
			OPTIM ?= -O1 ;
		} else {
			OPTIM ?= -O7 ;
		}
	}

	# setup objects location
	local objdir = [ FDirName $(LOCALE_OBJECTS_DIR) $(dir[2-]) ] ;
	SEARCH_SOURCE += $(objdir) ;
	LOCATE_SOURCE = $(objdir) ;
	LOCATE_TARGET = $(objdir) ;

	# setup main targets location
	LOCATE_MAIN_TARGET ?= [ FDirName $(LOCALE_DISTRO_DIR) $(dir[2-]) ] ;
}

# The LOCATE_MAIN_TARGET variable shall be reset for each subdirectory.
AUTO_SET_UP_CONFIG_VARIABLES += LOCATE_MAIN_TARGET ;

# Add the rules setting up the build settings for a subdirectory to the
# rules invoked by SubDir.
SUBDIRRULES += SetUpSubDirBuildSettings ;
